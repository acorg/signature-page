#! /usr/bin/env python3

import sys
if f"{sys.version_info.major}.{sys.version_info.minor}" < "3.7": raise RuntimeError("Run script with python 3.7+")
from pathlib import Path
import traceback, subprocess, datetime
import logging; module_logger = logging.getLogger(__name__)

# ----------------------------------------------------------------------

sLabName = {"all": "CDC+Crick+NIID+VIDRL", "cdc": "CDC", "melb": "VIDRL", "niid": "NIID", "nimr": "Crick"}
sSubtypes = ["h1", "h3", "bv", "by"]
sSubtype = {"h1": "H1", "h3": "H3", "bv": "B/Vic", "by": "B/Yam"}
sToday = datetime.date.today().strftime("%Y-%m-%d")

# ----------------------------------------------------------------------

def main(args):
    working_dir = Path(args.working_dir)
    make_pdfs(working_dir)
    update_report(working_dir, open_report=args.open_report)
    update_index(working_dir)

# ----------------------------------------------------------------------

def make_pdfs(working_dir):
    pdfs_generated = 0
    for subtype in sSubtypes:
        # Tree
        tree_source = working_dir.joinpath(f"tree/{subtype}.tree.json.xz")
        tree_settings = working_dir.joinpath(f"{subtype}.tree.settings.json")
        tree_pdf = working_dir.joinpath(f"{subtype}.tree.pdf")
        if not tree_settings.exists():
            subprocess.check_call(["sigp", "--init-settings", tree_settings, tree_source, tree_pdf])
        elif not tree_pdf.exists() or tree_pdf.stat().st_mtime < tree_settings.stat().st_mtime or tree_pdf.stat().st_mtime < tree_source.stat().st_mtime:
            subprocess.check_call(["sigp", "-s", tree_settings, tree_source, tree_pdf, "--open"])
        # Sigp
        for assay, lab in labs_assays_for_subtype(subtype):
            sp_settings = working_dir.joinpath(f"{lab}-{subtype}-{assay}.sp.settings.json")
            chart = working_dir.joinpath(f"merges/{lab}-{subtype}-{assay}.ace")
            sp_pdf = working_dir.joinpath(f"{lab}-{subtype}-{assay}.sp.pdf")
            if not sp_settings.exists():
                # sp_init_settings = working_dir.joinpath(f"{lab}-{subtype}-{assay}.sp.settings.init.json")
                cmd_is = [] # ["-s", sp_init_settings] if sp_init_settings.exists() else []
                subprocess.check_call(["sigp", "-s", tree_settings] + cmd_is + ["--init-settings", sp_settings, "--chart", chart, tree_source, sp_pdf])
                pdfs_generated += 1
            else:
                pdf_mtime = sp_pdf.stat().st_mtime
                if not sp_pdf.exists() or pdf_mtime < tree_settings.stat().st_mtime or pdf_mtime < sp_settings.stat().st_mtime or pdf_mtime < tree_source.stat().st_mtime or pdf_mtime < chart.stat().st_mtime:
                    subprocess.check_call(["sigp", "-s", tree_settings, "-s", sp_settings, "--chart", chart, tree_source, sp_pdf, "--open"])
                    pdfs_generated += 1
    return pdfs_generated

# ----------------------------------------------------------------------

def labs_assays_for_subtype(subtype):
    if subtype == "h1":
        return [["hi", lab] for lab in ["all", "cdc", "melb", "niid", "nimr"]]
    elif subtype == "h3":
        return [["hi", lab] for lab in ["cdc", "melb", "nimr"]] + [["neut", lab] for lab in ["cdc", "melb", "niid", "nimr"]]
    elif subtype == "bv" or subtype == "by":
        return [["hi", lab] for lab in ["cdc", "melb", "niid", "nimr"]]
    else:
        raise RuntimeError("Unrecognized subtype: " + subtype)

# ----------------------------------------------------------------------

def update_report(working_dir, open_report=False):
    report_tex = working_dir.joinpath("report.tex")
    report_pdf = working_dir.joinpath("report.pdf")
    if not report_pdf.exists() or any(report_pdf.stat().st_mtime < pdf.stat().st_mtime for pdf in working_dir.glob("*.pdf")):
        data = []
        data.extend([latex_T_Head, latex_T_Setup, latex_T_Begin, latex_T_Cover, "\\blankpage"])
        for subtype in sSubtypes:
            for assay, lab in labs_assays_for_subtype(subtype):
                filename = working_dir.joinpath(f"{lab}-{subtype}-{assay}.sp.pdf")
                if filename.exists():
                    data.append(latex_T_SignaturePage.format(image=str(filename)))
        data.append(latex_T_Tail)

        substitute = {
            "date": sToday,
            "documentclass": "\documentclass[a4paper,landscape,12pt]{article}",
            "cover_top_space": "40pt",
            "cover_after_meeting_date_space": "100pt",
            "usepackage": "\\usepackage[noheadfoot,nomarginpar,margin=0pt,bottom=10pt,paperheight=900.0pt,paperwidth=565.0pt]{geometry}",
            "cover_quotation": "\\quotation",
            "$0": sys.argv[0],
            }

        text = '\n\n'.join(data)
        text = text.replace('%no-eol%\n', '')
        for option, value in substitute.items():
            if isinstance(value, (str, int, float)):
                text = text.replace('%{}%'.format(option), str(value))
        with report_tex.open("w") as fd:
            fd.write(text)

        stdout = working_dir.joinpath("latex.log").open("w")
        subprocess.check_call(["pdflatex", "-interaction=nonstopmode", "-file-line-error", str(report_tex)], stdout=stdout, stderr=stdout)
        if open_report:
            subprocess.check_call(["open", str(report_pdf)])

latex_T_Head = r"""%no-eol%
% !TEX encoding = UTF-8 Unicode
% generated by %$0% on %now%
%documentclass%
\pagestyle{empty}
%\usepackage[margin=2.0cm,top=2.0cm]{geometry}
\usepackage[cm]{fullpage}
\usepackage{verbatim}
\usepackage[table]{xcolor}

\usepackage{graphicx}           % multiple pdfs per page
\usepackage[export]{adjustbox}  % frame in \includegraphics
\usepackage{grffile}            % to allow .a.pdf in \includegraphics
\usepackage{pdfpages}           % phylogenetic tree
\usepackage{fancyhdr}           % keep page numbers in embedded phylogenetic tree
\usepackage{calc}
\usepackage{hyperref}           % ToC entries as links
\usepackage{tocloft}            % \cftsetindents
\usepackage[toc,page]{appendix} % Appendice
\usepackage{titletoc}           % ToC entries without numbers
\usepackage[T1]{fontenc}        % fonts
\usepackage{times}              % font
%usepackage%
"""

latex_T_Setup = r"""%no-eol%
% ----------------------------------------------------------------------
% remove section numbering
% ----------------------------------------------------------------------

%% http://www.ehow.com/how_8085363_hide-section-numbers-latex.html
\setcounter{secnumdepth}{-1}

% ----------------------------------------------------------------------
% Signature page
% ----------------------------------------------------------------------
\newenvironment{SignaturePageEnv}{
   \noindent
   \begin{center}
}{\end{center}\par}
\newcommand{\SignaturePageFit}[1]{\begin{SignaturePageEnv}\resizebox{!}{0.98\textheight}{\includegraphics[page=1]{#1}}\end{SignaturePageEnv}}
\newcommand{\SignaturePage}[1]{\begin{SignaturePageEnv}\includegraphics[page=1]{#1}\end{SignaturePageEnv}}

% ----------------------------------------------------------------------
% Blank page (http://tex.stackexchange.com/questions/36880/insert-a-blank-page-after-current-page)
% ----------------------------------------------------------------------
\newcommand\blankpage{%
  \newpage
  \vspace*{100pt}
  \thispagestyle{empty}%
  \newpage}
"""

latex_T_Begin = r"""%no-eol%
% ****************************************************************************************************
% Document
% ----------------------------------------------------------------------

\begin{document}
\rmfamily
"""

latex_T_Cover = r"""%no-eol%
% ----------------------------------------------------------------------
% Cover
% ----------------------------------------------------------------------

\thispagestyle{empty}

{%cover_quotation%
\vspace*{%cover_top_space%}
{
\fontsize{22}{26} \selectfont
\noindent
\textbf{Signature pages}
\par
}

\vspace{90pt}
{
\fontsize{19}{24} \selectfont
\vspace{50pt}
\noindent
%date%
\par
}

\vspace{%cover_after_meeting_date_space%}
{
\large
\noindent
Center for Pathogen Evolution

% \vspace{10pt}
% \noindent
% WHO Collaborating Center for Modeling, Evolution, and Control of Emerging Infectious Diseases

\vspace{10pt}
\noindent
University of Cambridge, United Kingdom
% do not remove two empty lines below


% do not remove two empty lines above!
}
}
"""

latex_T_SignaturePage = r"\SignaturePageFit{{{image}}}"

latex_T_Tail = r"""%no-eol%
% ---------------------------------------------------------
\end{document}
"""

# ----------------------------------------------------------------------

def update_index(working_dir):
    index_file = working_dir.joinpath("index.html")
    if not index_file.exists() or any(index_file.stat().st_mtime < pdf.stat().st_mtime for pdf in working_dir.glob("*.pdf")):

        if working_dir.joinpath("report.pdf").exists():
            report = "<a href=\"report.pdf\">Report (all signature pages in one pdf)</a>"
        else:
            report = ""

        prev_subtype_assay = None
        def make_sig_page_li(lab, subtype, assay):
            subtype_assay = f"{subtype}-{assay}"
            nonlocal prev_subtype_assay
            if prev_subtype_assay is not None and prev_subtype_assay != subtype_assay:
                prefix = "<br>\n      "
            else:
                prefix = ""
            prev_subtype_assay = subtype_assay
            if working_dir.joinpath(f"{lab}-{subtype}-{assay}.sp.pdf").exists():
                return prefix + f"<li><a href=\"{lab}-{subtype}-{assay}.sp.pdf\" >{sSubtype[subtype]} {assay.upper()} {sLabName[lab]}</a></li>"
            else:
                return prefix
        sig_page_li = "\n      ".join(make_sig_page_li(lab, subtype, assay) for subtype in sSubtypes for assay, lab in labs_assays_for_subtype(subtype))

        def make_tree_li(subtype):
            if working_dir.joinpath(f"{subtype}.tree.pdf").exists():
                return f"<li><a href=\"{subtype}.tree.pdf\">{sSubtype[subtype]} pdf</a></li>"
            else:
                return ""
        tree_li = "\n      ".join(make_tree_li(subtype) for subtype in sSubtypes)

        with index_file.open("w") as fd:
            fd.write(sIndexTemplate.format(date=sToday, report=report, sig_page_li=sig_page_li, tree_li=tree_li))

sIndexTemplate = """<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Signature pages {date}</title>
  </head>
  <body>
    <h2>Signature pages {date}</h2>
    <h3>Signature pages</h3>
    {report}
    <ol>
      {sig_page_li}
    </ol>
    <h3>Trees and preparation data</h3>
    <ol>
      {tree_li}
    </ol>
  </body>
</html>
"""

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-w', '--working-dir', action='store', dest='working_dir', default=".")
    parser.add_argument('--open-report', action='store_true', dest='open_report', default=False)
    parser.add_argument('--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    # parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s [%(name)s.%(funcName)s %(lineno)d]")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
